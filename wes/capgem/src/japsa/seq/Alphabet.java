/*****************************************************************************
 * Copyright (c) Minh Duc Cao, Monash Uni & UQ, All rights reserved.         *
 *                                                                           *
 * Redistribution and use in source and binary forms, with or without        *
 * modification, are permitted provided that the following conditions        *
 * are met:                                                                  * 
 *                                                                           *
 * 1. Redistributions of source code must retain the above copyright notice, *
 *    this list of conditions and the following disclaimer.                  *
 * 2. Redistributions in binary form must reproduce the above copyright      *
 *    notice, this list of conditions and the following disclaimer in the    *
 *    documentation and/or other materials provided with the distribution.   *
 * 3. Neither the names of the institutions nor the names of the contributors*
 *    may be used to endorse or promote products derived from this software  *
 *    without specific prior written permission.                             *
 *                                                                           *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS   *
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, *
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR    *
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR         *
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,     *
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,       *
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR        *
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF    *
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING      *
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS        *
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.              *
 ****************************************************************************/

/*                           Revision History                                
 * 04/01/2012 - Minh Duc Cao: Created                                        
 * 30/12/2012 - Minh Duc Cao revised, added DNAs and Protein classes. 
 ****************************************************************************/

package japsa.seq;

/**
 * The class implements an dna, ideally of small size (so that every label
 * can be mapped to a char, so maximum  65,535). 
 * 
 * The class also provides several alphabets for use, including DNA and Protein
 * 
 * @author Minh Duc Cao (minhduc \dot cao \at gmail \dot com)
 * 
 */
public abstract class Alphabet {
	// Internally, an dna is an array of chars
	/**
	 * List of labels in chars
	 */
	private final char[] symbolList;
	private final String name;		

	/**
	 * Construction an dna from name and list of symbols
	 * @param aName
	 * @param chars
	 */
	private Alphabet(String aName, char[] chars) {
		name = aName;
		symbolList = new char[chars.length];
		for (int i = 0; i < chars.length; i++)
			symbolList[i] = chars[i];		
	}

	/**
	 * 
	 * @return the size of the dna
	 */
	public int size() {
		return symbolList.length;
	}

	/**
	 * Convert a character to its index in the dna
	 * 
	 * @param c
	 *            : the character need to convert
	 * @return the index of the character if it is valid, return a negative
	 *         number if the character is invalid
	 */
	public int char2int(char c) {
		//TODO: reimplement this method as mapping directly char to int
		for (int i = 0; i < symbolList.length; i++)
			if (c == symbolList[i])
				return i;

		return -1;
	}

	/**
	 * Convert a character to the byte index.
	 * @param c
	 * @return the index of the character, -1 for an invalid char
	 */
	@Deprecated
	public byte char2byte(char c) {
		//TODO: reimplement this method as mapping directly char to int
		for (byte i = 0; i < symbolList.length; i++)
			if (c == symbolList[i])
				return i;

		return -1;
	}
	
	/**
	 * Return the character corresponding to an index
	 * Require that the number is valid (i < size()) 
	 * @param i
	 * @return the character corresponding to the index i
	 */
	public char int2char(int i) {
		return symbolList[i];
	}
	
	
	/**
	 * Test if symbol a matches with symbol b
	 * Note that, this not symmetric operation, such as N may matches A, but not
	 * the other way around.
	 * 
	 * @param a
	 * @param b
	 * @return
	 */
	public abstract boolean match(int a, int b);	
	
	/**
	 * Return the representing of the dna
	 */
	public String toString() {
		StringBuffer sb = new StringBuffer();
		sb.append(symbolList[0]);
		for (int i = 1; i < symbolList.length; i++)
			sb.append(", " + symbolList[i]);

		return sb.toString();
	}

	/**
	 * Get the name of the dna
	 * @return
	 */
	public String getName() {
		return name;
	}
	
	/**
	 * Fast conversion of a byte reading from a stream to byte index.
	 * As such, the method should only be used for very small dna (<=256)
	 * 
	 * @param byteRead
	 * @return
	 */
	public abstract byte byte2index(byte byteRead);


	public static Alphabet.DNA DNA() {
		return DNA16.INSTANCE;
	}
	
	public static Alphabet.DNA16 DNA16() {
		return DNA16.INSTANCE;
	}
	public static Alphabet.DNA4 DNA4() {
		return DNA4.INSTANCE;
	}
	public static Alphabet DNA5() {
		return DNA5.INSTANCE;
	}
	public static Alphabet DNA6() {
		return DNA6.INSTANCE;
	}
	
	public static Alphabet.Protein PROTEIN() {
		return Protein.INSTANCE;
	}
	
	public static Alphabet.ProteinExtention PROTEIN_EXTENTION() {
		return ProteinExtention.INSTANCE;
	}
	
	public static Alphabet getAlphabet(String alp){
		if (alp == null)
			return null;

		String alpU = alp.toUpperCase();
		if (alpU.equals("DNA"))
			return DNA16();
		if (alpU.equals("DNA4"))
			return DNA4();
		if (alpU.equals("DNA5"))
			return DNA5();
		if (alpU.equals("DNA6"))
			return DNA6();
		if (alpU.equals("DNA16"))
			return DNA16();
		if (alpU.equals("PROTEIN"))
			return PROTEIN();

		throw new RuntimeException("Unknown dna. Currently only DNA, DNA4, " +
		"DNA5, DNA6, DNA16 and Protein are recognised");
	}	

	public static Alphabet RNA() {
		throw new RuntimeException("Not yet implemented");
	}

	/**
	 * Super class for DNA
	 * @author minhduc
	 *
	 */
	public static abstract class DNA extends Alphabet{
		//Standard DNA
		public static final int A = 0, C = 1, G = 2, T = 3;
		public static final int U = T;
		//wildcards DNA5&6
		public static final int N = 4, X = 5;
		public static final int GAP = 5;
		
		//Extended dna, no particular reason for these values
		//TODO: Have a better way to assign values to these characters
		public static final int R = 6, Y = 7, H = 8, V = 9, D = 10, B = 11, M = 12, W = 13, K = 14, S = 15;		
		
		/**
		 * @param chars
		 */
		private DNA(String name, char[] chars) {
			super(name, chars);			
		}		
		public abstract int complement(int sy);
		
		
		public static Sequence complement(Sequence seq){			
			if (seq.alphabet() instanceof DNA){
				DNA dna = (DNA) seq.alphabet();
				Sequence comp = new Sequence(dna, seq.length());
				int j = 0;
				for (int i = seq.length() - 1; i >=0;i--){
					comp.setBase(j++, (byte) dna.complement(seq.getBase(i)));					
				}
				return comp;
			}else{
				throw new RuntimeException(seq.alphabet() + " is not DNA");
			}
		}
	}
	
	/**
	 * Alphabet for standard DNA sequence
	 * @author Minh Duc Cao
	 *
	 */
	public static class DNA4 extends Alphabet.DNA{
		//Quick conversion from byte to nucleotide
		// >=0 valid nucleotide, 0=A, 1=C,2=G,3=T
		//     4=N,5=X,7=W,8=Y,9=H,10=V,11=D,12=B,13=M,14=S,15=K
		//-10 = CR, -13=LF
		//-128: not interested
		private static byte[] BYTE_DNA4_MAP = {
			//value, newIndex, original
				-128, //0 -> -128
				-128, //1 -> -127
				-128, //2 -> -126
				-128, //3 -> -125
				-128, //4 -> -124
				-128, //5 -> -123
				-128, //6 -> -122
				-128, //7 -> -121
				-128, //8 -> -120
				-128, //9 -> -119
				-128, //10 -> -118
				-128, //11 -> -117
				-128, //12 -> -116
				-128, //13 -> -115
				-128, //14 -> -114
				-128, //15 -> -113
				-128, //16 -> -112
				-128, //17 -> -111
				-128, //18 -> -110
				-128, //19 -> -109
				-128, //20 -> -108
				-128, //21 -> -107
				-128, //22 -> -106
				-128, //23 -> -105
				-128, //24 -> -104
				-128, //25 -> -103
				-128, //26 -> -102
				-128, //27 -> -101
				-128, //28 -> -100
				-128, //29 -> -99
				-128, //30 -> -98
				-128, //31 -> -97
				-128, //32 -> -96
				-128, //33 -> -95
				-128, //34 -> -94
				-128, //35 -> -93
				-128, //36 -> -92
				-128, //37 -> -91
				-128, //38 -> -90
				-128, //39 -> -89
				-128, //40 -> -88
				-128, //41 -> -87
				-128, //42 -> -86
				-128, //43 -> -85
				-128, //44 -> -84
				-128, //45 -> -83
				-128, //46 -> -82
				-128, //47 -> -81
				-128, //48 -> -80
				-128, //49 -> -79
				-128, //50 -> -78
				-128, //51 -> -77
				-128, //52 -> -76
				-128, //53 -> -75
				-128, //54 -> -74
				-128, //55 -> -73
				-128, //56 -> -72
				-128, //57 -> -71
				-128, //58 -> -70
				-128, //59 -> -69
				-128, //60 -> -68
				-128, //61 -> -67
				-128, //62 -> -66
				-128, //63 -> -65
				-128, //64 -> -64
				-128, //65 -> -63
				-128, //66 -> -62
				-128, //67 -> -61
				-128, //68 -> -60
				-128, //69 -> -59
				-128, //70 -> -58
				-128, //71 -> -57
				-128, //72 -> -56
				-128, //73 -> -55
				-128, //74 -> -54
				-128, //75 -> -53
				-128, //76 -> -52
				-128, //77 -> -51
				-128, //78 -> -50
				-128, //79 -> -49
				-128, //80 -> -48
				-128, //81 -> -47
				-128, //82 -> -46
				-128, //83 -> -45
				-128, //84 -> -44
				-128, //85 -> -43
				-128, //86 -> -42
				-128, //87 -> -41
				-128, //88 -> -40
				-128, //89 -> -39
				-128, //90 -> -38
				-128, //91 -> -37
				-128, //92 -> -36
				-128, //93 -> -35
				-128, //94 -> -34
				-128, //95 -> -33
				-128, //96 -> -32
				-128, //97 -> -31
				-128, //98 -> -30
				-128, //99 -> -29
				-128, //100 -> -28
				-128, //101 -> -27
				-128, //102 -> -26
				-128, //103 -> -25
				-128, //104 -> -24
				-128, //105 -> -23
				-128, //106 -> -22
				-128, //107 -> -21
				-128, //108 -> -20
				-128, //109 -> -19
				-128, //110 -> -18
				-128, //111 -> -17
				-128, //112 -> -16
				-128, //113 -> -15
				-128, //114 -> -14
				-128, //115 -> -13
				-128, //116 -> -12
				-128, //117 -> -11
				-128, //118 -> -10
				-128, //119 -> -9
				-128, //120 -> -8
				-128, //121 -> -7
				-128, //122 -> -6
				-128, //123 -> -5
				-128, //124 -> -4
				-128, //125 -> -3
				-128, //126 -> -2
				-128, //127 -> -1
				-128, //128 -> 0 => NULL
				-128, //129 -> 1 => SOH
				-128, //130 -> 2 => STX
				-128, //131 -> 3 => ETX
				-128, //132 -> 4 => EOT
				-128, //133 -> 5 => ENQ
				-128, //134 -> 6 => ACK
				-128, //135 -> 7 => BEL
				-128, //136 -> 8 => BS
				-128, //137 -> 9 => TAB
				-10, //138 -> 10 => LF <=
				-128, //139 -> 11 => VT                    '
				-128, //140 -> 12 => NP
				-13, //141 -> 13 => CR <=
				-128, //142 -> 14 => SO
				-128, //143 -> 15 => SI
				-128, //144 -> 16 => DLE
				-128, //145 -> 17 => DC1
				-128, //146 -> 18 => DC2
				-128, //147 -> 19 => DC3
				-128, //148 -> 20 => DC4
				-128, //149 -> 21 => NAK
				-128, //150 -> 22 => SYN
				-128, //151 -> 23 => ETB
				-128, //152 -> 24 => CAN
				-128, //153 -> 25 => EM
				-128, //154 -> 26 => SUB
				-128, //155 -> 27 => ESC
				-128, //156 -> 28 => FS
				-128, //157 -> 29 => GS
				-128, //158 -> 30 => RS
				-128, //159 -> 31 => US
				-128, //160 -> 32 => Space
				-1, //161 -> 33 => '!'
				-1, //162 -> 34 => '"'
				-1, //163 -> 35 => '#'
				-1, //164 -> 36 => '$'
				-1, //165 -> 37 => '%'
				-1, //166 -> 38 => '&'
				-1, //167 -> 39 => '''
				-1, //168 -> 40 => '('
				-1, //169 -> 41 => ')'
				-1, //170 -> 42 => '*'
				-1, //171 -> 43 => '+'
				-1, //172 -> 44 => ','
				-1, //173 -> 45 => '-'
				-1, //174 -> 46 => '.'
				-1, //175 -> 47 => '/'
				-1, //176 -> 48 => '0'
				-1, //177 -> 49 => '1'
				-1, //178 -> 50 => '2'
				-1, //179 -> 51 => '3'
				-1, //180 -> 52 => '4'
				-1, //181 -> 53 => '5'
				-1, //182 -> 54 => '6'
				-1, //183 -> 55 => '7'
				-1, //184 -> 56 => '8'
				-1, //185 -> 57 => '9'
				-1, //186 -> 58 => ':'
				-1, //187 -> 59 => ';'
				-1, //188 -> 60 => '<'
				-1, //189 -> 61 => '='
				-1, //190 -> 62 => '>'
				-1, //191 -> 63 => '?'
				-1, //192 -> 64 => '@'
				A, //193 -> 65 => 'A'		
				-1, //194 -> 66 => 'B'
				C, //195 -> 67 => 'C'
				-1, //196 -> 68 => 'D'
				-1, //197 -> 69 => 'E'
				-1, //198 -> 70 => 'F'
				G, //199 -> 71 => 'G'
				-1, //200 -> 72 => 'H'
				-1, //201 -> 73 => 'I'
				-1, //202 -> 74 => 'J'
				-1, //203 -> 75 => 'K'
				-1, //204 -> 76 => 'L'
				-1, //205 -> 77 => 'M'
				-1, //206 -> 78 => 'N'
				-1, //207 -> 79 => 'O'
				-1, //208 -> 80 => 'P'
				-1, //209 -> 81 => 'Q'
				-1, //210 -> 82 => 'R'
				-1, //211 -> 83 => 'S'
				T, //212 -> 84 => 'T'
			    T, //213 -> 85 => 'U'
				-1, //214 -> 86 => 'V'
				-1, //215 -> 87 => 'W'
				-1, //216 -> 88 => 'X'
				-1, //217 -> 89 => 'Y'
				-1, //218 -> 90 => 'Z'
				-1, //219 -> 91 => '['
				-1, //220 -> 92 => '\'
				-1, //221 -> 93 => ']'
				-1, //222 -> 94 => '^'
				-1, //223 -> 95 => '_'
				-1, //224 -> 96 => '`'
				A, //225 -> 97 => 'a'
				-1, //226 -> 98 => 'b'
				C, //227 -> 99 => 'c'
				-1, //228 -> 100 => 'd'
				-1, //229 -> 101 => 'e'
				-1, //230 -> 102 => 'f'
				G, //231 -> 103 => 'g'
				-1, //232 -> 104 => 'h'
				-1, //233 -> 105 => 'i'
				-1, //234 -> 106 => 'j'
				-1, //235 -> 107 => 'k'
				-1, //236 -> 108 => 'l'
				-1, //237 -> 109 => 'm'
				-1, //238 -> 110 => 'n'
				-1, //239 -> 111 => 'o'
				-1, //240 -> 112 => 'p'
				-1, //241 -> 113 => 'q'
				-1, //242 -> 114 => 'r'
				-1, //243 -> 115 => 's'
				T, //244 -> 116 => 't'
				T, //245 -> 117 => 'u'
				-1, //246 -> 118 => 'v'
				-1, //247 -> 119 => 'w'
				-1, //248 -> 120 => 'x'
				-1, //249 -> 121 => 'y'
				-1, //250 -> 122 => 'z'
				-1, //251 -> 123 => '{'
				-1, //252 -> 124 => '|'
				-1, //253 -> 125 => '}'
				-1, //254 -> 126 => '~'
				-1 //255 -> 127 => DEL
			};
		/****************************************/
		public static DNA4 INSTANCE = new DNA4();		
		
		private DNA4(){
			super("DNA4", new char[]{'A','C','G','T'});
		}

		/* (non-Javadoc)
		 * @see bio.seq.Alphabet.DNA#complement(int)
		 */
		@Override
		public int complement(int sy) {
			return 3 - sy;		
		}

		/* (non-Javadoc)
		 * @see bio.seq.Alphabet#byte2byte(byte)
		 */
		@Override
		public byte byte2index(byte byteRead) {
			return BYTE_DNA4_MAP[byteRead + 128];
		}

		/* (non-Javadoc)
		 * @see bio.seq.Alphabet#match(byte, byte)
		 */
		@Override
		public boolean match(int a, int b) {			
			return a == b;
		}
	}
	/**
	 * 
	 * @author Minh Duc Cao
	 *
	 */
	public static class DNA5 extends Alphabet.DNA{		
		public static DNA5 INSTANCE = new DNA5();
		
		private static byte[] BYTE_DNA5_MAP = {
			//value, newIndex, original
				-128, //0 -> -128
				-128, //1 -> -127
				-128, //2 -> -126
				-128, //3 -> -125
				-128, //4 -> -124
				-128, //5 -> -123
				-128, //6 -> -122
				-128, //7 -> -121
				-128, //8 -> -120
				-128, //9 -> -119
				-128, //10 -> -118
				-128, //11 -> -117
				-128, //12 -> -116
				-128, //13 -> -115
				-128, //14 -> -114
				-128, //15 -> -113
				-128, //16 -> -112
				-128, //17 -> -111
				-128, //18 -> -110
				-128, //19 -> -109
				-128, //20 -> -108
				-128, //21 -> -107
				-128, //22 -> -106
				-128, //23 -> -105
				-128, //24 -> -104
				-128, //25 -> -103
				-128, //26 -> -102
				-128, //27 -> -101
				-128, //28 -> -100
				-128, //29 -> -99
				-128, //30 -> -98
				-128, //31 -> -97
				-128, //32 -> -96
				-128, //33 -> -95
				-128, //34 -> -94
				-128, //35 -> -93
				-128, //36 -> -92
				-128, //37 -> -91
				-128, //38 -> -90
				-128, //39 -> -89
				-128, //40 -> -88
				-128, //41 -> -87
				-128, //42 -> -86
				-128, //43 -> -85
				-128, //44 -> -84
				-128, //45 -> -83
				-128, //46 -> -82
				-128, //47 -> -81
				-128, //48 -> -80
				-128, //49 -> -79
				-128, //50 -> -78
				-128, //51 -> -77
				-128, //52 -> -76
				-128, //53 -> -75
				-128, //54 -> -74
				-128, //55 -> -73
				-128, //56 -> -72
				-128, //57 -> -71
				-128, //58 -> -70
				-128, //59 -> -69
				-128, //60 -> -68
				-128, //61 -> -67
				-128, //62 -> -66
				-128, //63 -> -65
				-128, //64 -> -64
				-128, //65 -> -63
				-128, //66 -> -62
				-128, //67 -> -61
				-128, //68 -> -60
				-128, //69 -> -59
				-128, //70 -> -58
				-128, //71 -> -57
				-128, //72 -> -56
				-128, //73 -> -55
				-128, //74 -> -54
				-128, //75 -> -53
				-128, //76 -> -52
				-128, //77 -> -51
				-128, //78 -> -50
				-128, //79 -> -49
				-128, //80 -> -48
				-128, //81 -> -47
				-128, //82 -> -46
				-128, //83 -> -45
				-128, //84 -> -44
				-128, //85 -> -43
				-128, //86 -> -42
				-128, //87 -> -41
				-128, //88 -> -40
				-128, //89 -> -39
				-128, //90 -> -38
				-128, //91 -> -37
				-128, //92 -> -36
				-128, //93 -> -35
				-128, //94 -> -34
				-128, //95 -> -33
				-128, //96 -> -32
				-128, //97 -> -31
				-128, //98 -> -30
				-128, //99 -> -29
				-128, //100 -> -28
				-128, //101 -> -27
				-128, //102 -> -26
				-128, //103 -> -25
				-128, //104 -> -24
				-128, //105 -> -23
				-128, //106 -> -22
				-128, //107 -> -21
				-128, //108 -> -20
				-128, //109 -> -19
				-128, //110 -> -18
				-128, //111 -> -17
				-128, //112 -> -16
				-128, //113 -> -15
				-128, //114 -> -14
				-128, //115 -> -13
				-128, //116 -> -12
				-128, //117 -> -11
				-128, //118 -> -10
				-128, //119 -> -9
				-128, //120 -> -8
				-128, //121 -> -7
				-128, //122 -> -6
				-128, //123 -> -5
				-128, //124 -> -4
				-128, //125 -> -3
				-128, //126 -> -2
				-128, //127 -> -1
				-128, //128 -> 0 => NULL
				-128, //129 -> 1 => SOH
				-128, //130 -> 2 => STX
				-128, //131 -> 3 => ETX
				-128, //132 -> 4 => EOT
				-128, //133 -> 5 => ENQ
				-128, //134 -> 6 => ACK
				-128, //135 -> 7 => BEL
				-128, //136 -> 8 => BS
				-128, //137 -> 9 => TAB
				-10, //138 -> 10 => LF <=
				-128, //139 -> 11 => VT                    '
				-128, //140 -> 12 => NP
				-13, //141 -> 13 => CR <=
				-128, //142 -> 14 => SO
				-128, //143 -> 15 => SI
				-128, //144 -> 16 => DLE
				-128, //145 -> 17 => DC1
				-128, //146 -> 18 => DC2
				-128, //147 -> 19 => DC3
				-128, //148 -> 20 => DC4
				-128, //149 -> 21 => NAK
				-128, //150 -> 22 => SYN
				-128, //151 -> 23 => ETB
				-128, //152 -> 24 => CAN
				-128, //153 -> 25 => EM
				-128, //154 -> 26 => SUB
				-128, //155 -> 27 => ESC
				-128, //156 -> 28 => FS
				-128, //157 -> 29 => GS
				-128, //158 -> 30 => RS
				-128, //159 -> 31 => US
				-128, //160 -> 32 => Space
				-1, //161 -> 33 => '!'
				-1, //162 -> 34 => '"'
				-1, //163 -> 35 => '#'
				-1, //164 -> 36 => '$'
				-1, //165 -> 37 => '%'
				-1, //166 -> 38 => '&'
				-1, //167 -> 39 => '''
				-1, //168 -> 40 => '('
				-1, //169 -> 41 => ')'
				-1, //170 -> 42 => '*'
				-1, //171 -> 43 => '+'
				-1, //172 -> 44 => ','
				-1, //173 -> 45 => '-'
				-1, //174 -> 46 => '.'
				-1, //175 -> 47 => '/'
				-1, //176 -> 48 => '0'
				-1, //177 -> 49 => '1'
				-1, //178 -> 50 => '2'
				-1, //179 -> 51 => '3'
				-1, //180 -> 52 => '4'
				-1, //181 -> 53 => '5'
				-1, //182 -> 54 => '6'
				-1, //183 -> 55 => '7'
				-1, //184 -> 56 => '8'
				-1, //185 -> 57 => '9'
				-1, //186 -> 58 => ':'
				-1, //187 -> 59 => ';'
				-1, //188 -> 60 => '<'
				-1, //189 -> 61 => '='
				-1, //190 -> 62 => '>'
				-1, //191 -> 63 => '?'
				-1, //192 -> 64 => '@'
				A, //193 -> 65 => 'A'		
				-1, //194 -> 66 => 'B'
				C, //195 -> 67 => 'C'
				-1, //196 -> 68 => 'D'
				-1, //197 -> 69 => 'E'
				-1, //198 -> 70 => 'F'
				G, //199 -> 71 => 'G'
				-1, //200 -> 72 => 'H'
				-1, //201 -> 73 => 'I'
				-1, //202 -> 74 => 'J'
				-1, //203 -> 75 => 'K'
				-1, //204 -> 76 => 'L'
				-1, //205 -> 77 => 'M'
				N, //206 -> 78 => 'N'
				-1, //207 -> 79 => 'O'
				-1, //208 -> 80 => 'P'
				-1, //209 -> 81 => 'Q'
				-1, //210 -> 82 => 'R'
				-1, //211 -> 83 => 'S'
				T, //212 -> 84 => 'T'
			    T, //213 -> 85 => 'U'
				-1, //214 -> 86 => 'V'
				-1, //215 -> 87 => 'W'
				-1, //216 -> 88 => 'X'
				-1, //217 -> 89 => 'Y'
				-1, //218 -> 90 => 'Z'
				-1, //219 -> 91 => '['
				-1, //220 -> 92 => '\'
				-1, //221 -> 93 => ']'
				-1, //222 -> 94 => '^'
				-1, //223 -> 95 => '_'
				-1, //224 -> 96 => '`'
				A, //225 -> 97 => 'a'
				-1, //226 -> 98 => 'b'
				C, //227 -> 99 => 'c'
				-1, //228 -> 100 => 'd'
				-1, //229 -> 101 => 'e'
				-1, //230 -> 102 => 'f'
				G, //231 -> 103 => 'g'
				-1, //232 -> 104 => 'h'
				-1, //233 -> 105 => 'i'
				-1, //234 -> 106 => 'j'
				-1, //235 -> 107 => 'k'
				-1, //236 -> 108 => 'l'
				-1, //237 -> 109 => 'm'
				N, //238 -> 110 => 'n'
				-1, //239 -> 111 => 'o'
				-1, //240 -> 112 => 'p'
				-1, //241 -> 113 => 'q'
				-1, //242 -> 114 => 'r'
				-1, //243 -> 115 => 's'
				T, //244 -> 116 => 't'
				T, //245 -> 117 => 'u'
				-1, //246 -> 118 => 'v'
				-1, //247 -> 119 => 'w'
				-1, //248 -> 120 => 'x'
				-1, //249 -> 121 => 'y'
				-1, //250 -> 122 => 'z'
				-1, //251 -> 123 => '{'
				-1, //252 -> 124 => '|'
				-1, //253 -> 125 => '}'
				-1, //254 -> 126 => '~'
				-128 //255 -> 127 => DEL
			};
		/****************************************/
		
		private DNA5(){
			super("DNA5", new char[]{'A','C','G','T','N'});
		}

		/* (non-Javadoc)
		 * @see bio.seq.Alphabet.DNA#complement(int)
		 */
		@Override
		public int complement(int sy) {
			if (sy < N)
			return 3 - sy;
			else return sy;
		}

		/* (non-Javadoc)
		 * @see bio.seq.Alphabet#byte2byte(byte)
		 */
		@Override
		public byte byte2index(byte byteRead) {	
			return BYTE_DNA5_MAP[byteRead + 128];
		}

		/* (non-Javadoc)
		 * @see bio.seq.Alphabet#match(byte, byte)
		 */
		@Override
		public boolean match(int a, int b){			
			return (a == b || a == N);
		}
	}
	//////////////////////////////////////////////////////////////////////
	public static class DNA6 extends Alphabet.DNA{		
		public static DNA6 INSTANCE = new DNA6();
		
		private static byte[] BYTE_DNA5_MAP = {
			//value, newIndex, original
				-128, //0 -> -128
				-128, //1 -> -127
				-128, //2 -> -126
				-128, //3 -> -125
				-128, //4 -> -124
				-128, //5 -> -123
				-128, //6 -> -122
				-128, //7 -> -121
				-128, //8 -> -120
				-128, //9 -> -119
				-128, //10 -> -118
				-128, //11 -> -117
				-128, //12 -> -116
				-128, //13 -> -115
				-128, //14 -> -114
				-128, //15 -> -113
				-128, //16 -> -112
				-128, //17 -> -111
				-128, //18 -> -110
				-128, //19 -> -109
				-128, //20 -> -108
				-128, //21 -> -107
				-128, //22 -> -106
				-128, //23 -> -105
				-128, //24 -> -104
				-128, //25 -> -103
				-128, //26 -> -102
				-128, //27 -> -101
				-128, //28 -> -100
				-128, //29 -> -99
				-128, //30 -> -98
				-128, //31 -> -97
				-128, //32 -> -96
				-128, //33 -> -95
				-128, //34 -> -94
				-128, //35 -> -93
				-128, //36 -> -92
				-128, //37 -> -91
				-128, //38 -> -90
				-128, //39 -> -89
				-128, //40 -> -88
				-128, //41 -> -87
				-128, //42 -> -86
				-128, //43 -> -85
				-128, //44 -> -84
				-128, //45 -> -83
				-128, //46 -> -82
				-128, //47 -> -81
				-128, //48 -> -80
				-128, //49 -> -79
				-128, //50 -> -78
				-128, //51 -> -77
				-128, //52 -> -76
				-128, //53 -> -75
				-128, //54 -> -74
				-128, //55 -> -73
				-128, //56 -> -72
				-128, //57 -> -71
				-128, //58 -> -70
				-128, //59 -> -69
				-128, //60 -> -68
				-128, //61 -> -67
				-128, //62 -> -66
				-128, //63 -> -65
				-128, //64 -> -64
				-128, //65 -> -63
				-128, //66 -> -62
				-128, //67 -> -61
				-128, //68 -> -60
				-128, //69 -> -59
				-128, //70 -> -58
				-128, //71 -> -57
				-128, //72 -> -56
				-128, //73 -> -55
				-128, //74 -> -54
				-128, //75 -> -53
				-128, //76 -> -52
				-128, //77 -> -51
				-128, //78 -> -50
				-128, //79 -> -49
				-128, //80 -> -48
				-128, //81 -> -47
				-128, //82 -> -46
				-128, //83 -> -45
				-128, //84 -> -44
				-128, //85 -> -43
				-128, //86 -> -42
				-128, //87 -> -41
				-128, //88 -> -40
				-128, //89 -> -39
				-128, //90 -> -38
				-128, //91 -> -37
				-128, //92 -> -36
				-128, //93 -> -35
				-128, //94 -> -34
				-128, //95 -> -33
				-128, //96 -> -32
				-128, //97 -> -31
				-128, //98 -> -30
				-128, //99 -> -29
				-128, //100 -> -28
				-128, //101 -> -27
				-128, //102 -> -26
				-128, //103 -> -25
				-128, //104 -> -24
				-128, //105 -> -23
				-128, //106 -> -22
				-128, //107 -> -21
				-128, //108 -> -20
				-128, //109 -> -19
				-128, //110 -> -18
				-128, //111 -> -17
				-128, //112 -> -16
				-128, //113 -> -15
				-128, //114 -> -14
				-128, //115 -> -13
				-128, //116 -> -12
				-128, //117 -> -11
				-128, //118 -> -10
				-128, //119 -> -9
				-128, //120 -> -8
				-128, //121 -> -7
				-128, //122 -> -6
				-128, //123 -> -5
				-128, //124 -> -4
				-128, //125 -> -3
				-128, //126 -> -2
				-128, //127 -> -1
				-128, //128 -> 0 => NULL
				-128, //129 -> 1 => SOH
				-128, //130 -> 2 => STX
				-128, //131 -> 3 => ETX
				-128, //132 -> 4 => EOT
				-128, //133 -> 5 => ENQ
				-128, //134 -> 6 => ACK
				-128, //135 -> 7 => BEL
				-128, //136 -> 8 => BS
				-128, //137 -> 9 => TAB
				-10, //138 -> 10 => LF <=
				-128, //139 -> 11 => VT                    '
				-128, //140 -> 12 => NP
				-13, //141 -> 13 => CR <=
				-128, //142 -> 14 => SO
				-128, //143 -> 15 => SI
				-128, //144 -> 16 => DLE
				-128, //145 -> 17 => DC1
				-128, //146 -> 18 => DC2
				-128, //147 -> 19 => DC3
				-128, //148 -> 20 => DC4
				-128, //149 -> 21 => NAK
				-128, //150 -> 22 => SYN
				-128, //151 -> 23 => ETB
				-128, //152 -> 24 => CAN
				-128, //153 -> 25 => EM
				-128, //154 -> 26 => SUB
				-128, //155 -> 27 => ESC
				-128, //156 -> 28 => FS
				-128, //157 -> 29 => GS
				-128, //158 -> 30 => RS
				-128, //159 -> 31 => US
				-128, //160 -> 32 => Space
				-1, //161 -> 33 => '!'
				-1, //162 -> 34 => '"'
				-1, //163 -> 35 => '#'
				-1, //164 -> 36 => '$'
				-1, //165 -> 37 => '%'
				-1, //166 -> 38 => '&'
				-1, //167 -> 39 => '''
				-1, //168 -> 40 => '('
				-1, //169 -> 41 => ')'
				-1, //170 -> 42 => '*'
				-1, //171 -> 43 => '+'
				-1, //172 -> 44 => ','
				X, //173 -> 45 => '-'
				X, //174 -> 46 => '.'
				-1, //175 -> 47 => '/'
				-1, //176 -> 48 => '0'
				-1, //177 -> 49 => '1'
				-1, //178 -> 50 => '2'
				-1, //179 -> 51 => '3'
				-1, //180 -> 52 => '4'
				-1, //181 -> 53 => '5'
				-1, //182 -> 54 => '6'
				-1, //183 -> 55 => '7'
				-1, //184 -> 56 => '8'
				-1, //185 -> 57 => '9'
				-1, //186 -> 58 => ':'
				-1, //187 -> 59 => ';'
				-1, //188 -> 60 => '<'
				-1, //189 -> 61 => '='
				-1, //190 -> 62 => '>'
				-1, //191 -> 63 => '?'
				-1, //192 -> 64 => '@'
				A, //193 -> 65 => 'A'		
				-1, //194 -> 66 => 'B'
				C, //195 -> 67 => 'C'
				-1, //196 -> 68 => 'D'
				-1, //197 -> 69 => 'E'
				-1, //198 -> 70 => 'F'
				G, //199 -> 71 => 'G'
				-1, //200 -> 72 => 'H'
				-1, //201 -> 73 => 'I'
				-1, //202 -> 74 => 'J'
				-1, //203 -> 75 => 'K'
				-1, //204 -> 76 => 'L'
				-1, //205 -> 77 => 'M'
				N, //206 -> 78 => 'N'
				-1, //207 -> 79 => 'O'
				-1, //208 -> 80 => 'P'
				-1, //209 -> 81 => 'Q'
				-1, //210 -> 82 => 'R'
				-1, //211 -> 83 => 'S'
				T, //212 -> 84 => 'T'
			    T, //213 -> 85 => 'U'
				-1, //214 -> 86 => 'V'
				-1, //215 -> 87 => 'W'
				X, //216 -> 88 => 'X'
				-1, //217 -> 89 => 'Y'
				-1, //218 -> 90 => 'Z'
				-1, //219 -> 91 => '['
				-1, //220 -> 92 => '\'
				-1, //221 -> 93 => ']'
				-1, //222 -> 94 => '^'
				-1, //223 -> 95 => '_'
				-1, //224 -> 96 => '`'
				A, //225 -> 97 => 'a'
				-1, //226 -> 98 => 'b'
				C, //227 -> 99 => 'c'
				-1, //228 -> 100 => 'd'
				-1, //229 -> 101 => 'e'
				-1, //230 -> 102 => 'f'
				G, //231 -> 103 => 'g'
				-1, //232 -> 104 => 'h'
				-1, //233 -> 105 => 'i'
				-1, //234 -> 106 => 'j'
				-1, //235 -> 107 => 'k'
				-1, //236 -> 108 => 'l'
				-1, //237 -> 109 => 'm'
				N, //238 -> 110 => 'n'
				-1, //239 -> 111 => 'o'
				-1, //240 -> 112 => 'p'
				-1, //241 -> 113 => 'q'
				-1, //242 -> 114 => 'r'
				-1, //243 -> 115 => 's'
				T, //244 -> 116 => 't'
				T, //245 -> 117 => 'u'
				-1, //246 -> 118 => 'v'
				-1, //247 -> 119 => 'w'
				X, //248 -> 120 => 'x'
				-1, //249 -> 121 => 'y'
				-1, //250 -> 122 => 'z'
				-1, //251 -> 123 => '{'
				-1, //252 -> 124 => '|'
				-1, //253 -> 125 => '}'
				-1, //254 -> 126 => '~'
				-128 //255 -> 127 => DEL
			};
		/****************************************/
		
		private DNA6(){
			super("DNA6", new char[]{'A','C','G','T','N','-'});
		}

		/* (non-Javadoc)
		 * @see bio.seq.Alphabet.DNA#complement(int)
		 */
		@Override
		public int complement(int sy) {
			if (sy < N)
			return 3 - sy;
			else return sy;
		}

		/* (non-Javadoc)
		 * @see bio.seq.Alphabet#byte2byte(byte)
		 */
		@Override
		public byte byte2index(byte byteRead) {	
			return BYTE_DNA5_MAP[byteRead + 128];
		}

		/* (non-Javadoc)
		 * @see bio.seq.Alphabet#match(byte, byte)
		 */
		@Override
		public boolean match(int a, int b){			
			return (a == b || a == N);
		}
	}
	/////////////////////////////////////////////////////////
	
		
	public static class DNA16 extends Alphabet.DNA{		
		public static DNA16 INSTANCE = new DNA16();		
		private static byte[] BYTE_DNA16_MAP = {
			//value, newIndex, original
				-128, //0 -> -128
				-128, //1 -> -127
				-128, //2 -> -126
				-128, //3 -> -125
				-128, //4 -> -124
				-128, //5 -> -123
				-128, //6 -> -122
				-128, //7 -> -121
				-128, //8 -> -120
				-128, //9 -> -119
				-128, //10 -> -118
				-128, //11 -> -117
				-128, //12 -> -116
				-128, //13 -> -115
				-128, //14 -> -114
				-128, //15 -> -113
				-128, //16 -> -112
				-128, //17 -> -111
				-128, //18 -> -110
				-128, //19 -> -109
				-128, //20 -> -108
				-128, //21 -> -107
				-128, //22 -> -106
				-128, //23 -> -105
				-128, //24 -> -104
				-128, //25 -> -103
				-128, //26 -> -102
				-128, //27 -> -101
				-128, //28 -> -100
				-128, //29 -> -99
				-128, //30 -> -98
				-128, //31 -> -97
				-128, //32 -> -96
				-128, //33 -> -95
				-128, //34 -> -94
				-128, //35 -> -93
				-128, //36 -> -92
				-128, //37 -> -91
				-128, //38 -> -90
				-128, //39 -> -89
				-128, //40 -> -88
				-128, //41 -> -87
				-128, //42 -> -86
				-128, //43 -> -85
				-128, //44 -> -84
				-128, //45 -> -83
				-128, //46 -> -82
				-128, //47 -> -81
				-128, //48 -> -80
				-128, //49 -> -79
				-128, //50 -> -78
				-128, //51 -> -77
				-128, //52 -> -76
				-128, //53 -> -75
				-128, //54 -> -74
				-128, //55 -> -73
				-128, //56 -> -72
				-128, //57 -> -71
				-128, //58 -> -70
				-128, //59 -> -69
				-128, //60 -> -68
				-128, //61 -> -67
				-128, //62 -> -66
				-128, //63 -> -65
				-128, //64 -> -64
				-128, //65 -> -63
				-128, //66 -> -62
				-128, //67 -> -61
				-128, //68 -> -60
				-128, //69 -> -59
				-128, //70 -> -58
				-128, //71 -> -57
				-128, //72 -> -56
				-128, //73 -> -55
				-128, //74 -> -54
				-128, //75 -> -53
				-128, //76 -> -52
				-128, //77 -> -51
				-128, //78 -> -50
				-128, //79 -> -49
				-128, //80 -> -48
				-128, //81 -> -47
				-128, //82 -> -46
				-128, //83 -> -45
				-128, //84 -> -44
				-128, //85 -> -43
				-128, //86 -> -42
				-128, //87 -> -41
				-128, //88 -> -40
				-128, //89 -> -39
				-128, //90 -> -38
				-128, //91 -> -37
				-128, //92 -> -36
				-128, //93 -> -35
				-128, //94 -> -34
				-128, //95 -> -33
				-128, //96 -> -32
				-128, //97 -> -31
				-128, //98 -> -30
				-128, //99 -> -29
				-128, //100 -> -28
				-128, //101 -> -27
				-128, //102 -> -26
				-128, //103 -> -25
				-128, //104 -> -24
				-128, //105 -> -23
				-128, //106 -> -22
				-128, //107 -> -21
				-128, //108 -> -20
				-128, //109 -> -19
				-128, //110 -> -18
				-128, //111 -> -17
				-128, //112 -> -16
				-128, //113 -> -15
				-128, //114 -> -14
				-128, //115 -> -13
				-128, //116 -> -12
				-128, //117 -> -11
				-128, //118 -> -10
				-128, //119 -> -9
				-128, //120 -> -8
				-128, //121 -> -7
				-128, //122 -> -6
				-128, //123 -> -5
				-128, //124 -> -4
				-128, //125 -> -3
				-128, //126 -> -2
				-128, //127 -> -1
				-128, //128 -> 0 => NULL
				-128, //129 -> 1 => SOH
				-128, //130 -> 2 => STX
				-128, //131 -> 3 => ETX
				-128, //132 -> 4 => EOT
				-128, //133 -> 5 => ENQ
				-128, //134 -> 6 => ACK
				-128, //135 -> 7 => BEL
				-128, //136 -> 8 => BS
				-128, //137 -> 9 => TAB
				-10, //138 -> 10 => LF <=
				-128, //139 -> 11 => VT                    '
				-128, //140 -> 12 => NP
				-13, //141 -> 13 => CR <=
				-128, //142 -> 14 => SO
				-128, //143 -> 15 => SI
				-128, //144 -> 16 => DLE
				-128, //145 -> 17 => DC1
				-128, //146 -> 18 => DC2
				-128, //147 -> 19 => DC3
				-128, //148 -> 20 => DC4
				-128, //149 -> 21 => NAK
				-128, //150 -> 22 => SYN
				-128, //151 -> 23 => ETB
				-128, //152 -> 24 => CAN
				-128, //153 -> 25 => EM
				-128, //154 -> 26 => SUB
				-128, //155 -> 27 => ESC
				-128, //156 -> 28 => FS
				-128, //157 -> 29 => GS
				-128, //158 -> 30 => RS
				-128, //159 -> 31 => US
				-128, //160 -> 32 => Space
				-1, //161 -> 33 => '!'
				-1, //162 -> 34 => '"'
				-1, //163 -> 35 => '#'
				-1, //164 -> 36 => '$'
				-1, //165 -> 37 => '%'
				-1, //166 -> 38 => '&'
				-1, //167 -> 39 => '''
				-1, //168 -> 40 => '('
				-1, //169 -> 41 => ')'
				-1, //170 -> 42 => '*'
				-1, //171 -> 43 => '+'
				-1, //172 -> 44 => ','
				X, //173 -> 45 => '-'   ei gap
				X, //174 -> 46 => '.'
				-1, //175 -> 47 => '/'
				-1, //176 -> 48 => '0'
				-1, //177 -> 49 => '1'
				-1, //178 -> 50 => '2'
				-1, //179 -> 51 => '3'
				-1, //180 -> 52 => '4'
				-1, //181 -> 53 => '5'
				-1, //182 -> 54 => '6'
				-1, //183 -> 55 => '7'
				-1, //184 -> 56 => '8'
				-1, //185 -> 57 => '9'
				-1, //186 -> 58 => ':'
				-1, //187 -> 59 => ';'
				-1, //188 -> 60 => '<'
				-1, //189 -> 61 => '='
				-1, //190 -> 62 => '>'
				-1, //191 -> 63 => '?'
				-1, //192 -> 64 => '@'
				A, //193 -> 65 => 'A'		
				B, //194 -> 66 => 'B'
				C, //195 -> 67 => 'C'
				D, //196 -> 68 => 'D'
				-1, //197 -> 69 => 'E'
				-1, //198 -> 70 => 'F'
				G, //199 -> 71 => 'G'
				H, //200 -> 72 => 'H'
				-1, //201 -> 73 => 'I'
				-1, //202 -> 74 => 'J'
				K, //203 -> 75 => 'K'
				-1, //204 -> 76 => 'L'
				M, //205 -> 77 => 'M'
				N, //206 -> 78 => 'N'
				-1, //207 -> 79 => 'O'
				-1, //208 -> 80 => 'P'
				-1, //209 -> 81 => 'Q'
				R, //210 -> 82 => 'R'
				S, //211 -> 83 => 'S'
				T, //212 -> 84 => 'T'
			   -1, //213 -> 85 => 'U'
				V, //214 -> 86 => 'V'
				W, //215 -> 87 => 'W'
				X, //216 -> 88 => 'X'
				Y, //217 -> 89 => 'Y'
				-1, //218 -> 90 => 'Z'
				-1, //219 -> 91 => '['
				-1, //220 -> 92 => '\'
				-1, //221 -> 93 => ']'
				-1, //222 -> 94 => '^'
				-1, //223 -> 95 => '_'
				-1, //224 -> 96 => '`'
				A, //225 -> 97 => 'a'
				B, //226 -> 98 => 'b'
				C, //227 -> 99 => 'c'
				D, //228 -> 100 => 'd'
				-1, //229 -> 101 => 'e'
				-1, //230 -> 102 => 'f'
				G, //231 -> 103 => 'g'
				H, //232 -> 104 => 'h'
				-1, //233 -> 105 => 'i'
				-1, //234 -> 106 => 'j'
				K, //235 -> 107 => 'k'
				-1, //236 -> 108 => 'l'
				M, //237 -> 109 => 'm'
				N, //238 -> 110 => 'n'
				-1, //239 -> 111 => 'o'
				-1, //240 -> 112 => 'p'
				-1, //241 -> 113 => 'q'
				R, //242 -> 114 => 'r'
				S, //243 -> 115 => 's'
				T, //244 -> 116 => 't'
				-1, //245 -> 117 => 'u'
				V, //246 -> 118 => 'v'
				W, //247 -> 119 => 'w'
				X, //248 -> 120 => 'x'
				Y, //249 -> 121 => 'y'
				-1, //250 -> 122 => 'z'
				-1, //251 -> 123 => '{'
				-1, //252 -> 124 => '|'
				-1, //253 -> 125 => '}'
				-1, //254 -> 126 => '~'
				-128 //255 -> 127 => DEL
			};
		/****************************************/
		private DNA16(){
			super("DNA16", new char[] {
					'A',//0
					'C',//1
					'G',//2
					'T',//3
					'N',//4
					'-',//5
					'R',//6		
					'Y',//7
					'H',//8
					'V',//9
					'D',//10
					'B',//11
					'M',//12
					'W',//13
					'K',//14
					'S'});//15
		}

		/* (non-Javadoc)
		 * @see bio.seq.Alphabet.DNA#complement(int)
		 */
		@Override
		public int complement(int sy) {
			if (sy <= T)
			return 3 - sy;
			else return sy;
		}

		/* (non-Javadoc)
		 * @see bio.seq.Alphabet#byte2byte(byte)
		 */
		@Override
		public byte byte2index(byte byteRead) {
			return BYTE_DNA16_MAP[byteRead + 128];
		}

		/* (non-Javadoc)
		 * @see bio.seq.Alphabet#match(byte, byte)
		 */
		@Override
		public boolean match(int a, int b) {
			//FIXME: need to take care of others 
			return (a == b || a == N);
		}
	}

	public static class Protein extends Alphabet{
		
		//NB: Make sure the following constants agree
		public static final int A =  0, ALA = A;
		public static final int R =  1, ARG = R;
		public static final int N =  2, ASN = N;
		public static final int D =  3, ASP = D;
		public static final int C =  4, CYS = C;
		public static final int Q =  5, GLN = Q;
		public static final int E =  6, GLU = E;
		public static final int G =  7, GLY = G;
		public static final int H =  8, HIS = H;
		public static final int I =  9, ILE = I;
		public static final int L = 10, LEU = L;
		public static final int K = 11, LYS = K;
		public static final int M = 12, MET = M;
		public static final int F = 13, PHE = F;
		public static final int P = 14, PRO = P;
		public static final int S = 15, SER = S;
		public static final int T = 16, THR = T;
		public static final int W = 17, TRP = W;
		public static final int Y = 18, TYR = Y;
		public static final int V = 19, VAL = V;
		public static final int X = 20, UKN = X;
		//convert int -> char
		private static char [] PROTEIN_ALPHABET = {'A', 'R', 'N', 'D', 'C', 'Q', 'E', 'G', 'H', 'I', 'L', 'K', 'M', 'F', 'P', 'S', 'T', 'W', 'Y', 'V','X'};
		
		//convert byte -> char ->int for fast IO
		private static byte[] BYTE_PROTEIN_MAP = {
			//value, newIndex, original
				-128, //0 -> -128
				-128, //1 -> -127
				-128, //2 -> -126
				-128, //3 -> -125
				-128, //4 -> -124
				-128, //5 -> -123
				-128, //6 -> -122
				-128, //7 -> -121
				-128, //8 -> -120
				-128, //9 -> -119
				-128, //10 -> -118
				-128, //11 -> -117
				-128, //12 -> -116
				-128, //13 -> -115
				-128, //14 -> -114
				-128, //15 -> -113
				-128, //16 -> -112
				-128, //17 -> -111
				-128, //18 -> -110
				-128, //19 -> -109
				-128, //20 -> -108
				-128, //21 -> -107
				-128, //22 -> -106
				-128, //23 -> -105
				-128, //24 -> -104
				-128, //25 -> -103
				-128, //26 -> -102
				-128, //27 -> -101
				-128, //28 -> -100
				-128, //29 -> -99
				-128, //30 -> -98
				-128, //31 -> -97
				-128, //32 -> -96
				-128, //33 -> -95
				-128, //34 -> -94
				-128, //35 -> -93
				-128, //36 -> -92
				-128, //37 -> -91
				-128, //38 -> -90
				-128, //39 -> -89
				-128, //40 -> -88
				-128, //41 -> -87
				-128, //42 -> -86
				-128, //43 -> -85
				-128, //44 -> -84
				-128, //45 -> -83
				-128, //46 -> -82
				-128, //47 -> -81
				-128, //48 -> -80
				-128, //49 -> -79
				-128, //50 -> -78
				-128, //51 -> -77
				-128, //52 -> -76
				-128, //53 -> -75
				-128, //54 -> -74
				-128, //55 -> -73
				-128, //56 -> -72
				-128, //57 -> -71
				-128, //58 -> -70
				-128, //59 -> -69
				-128, //60 -> -68
				-128, //61 -> -67
				-128, //62 -> -66
				-128, //63 -> -65
				-128, //64 -> -64
				-128, //65 -> -63
				-128, //66 -> -62
				-128, //67 -> -61
				-128, //68 -> -60
				-128, //69 -> -59
				-128, //70 -> -58
				-128, //71 -> -57
				-128, //72 -> -56
				-128, //73 -> -55
				-128, //74 -> -54
				-128, //75 -> -53
				-128, //76 -> -52
				-128, //77 -> -51
				-128, //78 -> -50
				-128, //79 -> -49
				-128, //80 -> -48
				-128, //81 -> -47
				-128, //82 -> -46
				-128, //83 -> -45
				-128, //84 -> -44
				-128, //85 -> -43
				-128, //86 -> -42
				-128, //87 -> -41
				-128, //88 -> -40
				-128, //89 -> -39
				-128, //90 -> -38
				-128, //91 -> -37
				-128, //92 -> -36
				-128, //93 -> -35
				-128, //94 -> -34
				-128, //95 -> -33
				-128, //96 -> -32
				-128, //97 -> -31
				-128, //98 -> -30
				-128, //99 -> -29
				-128, //100 -> -28
				-128, //101 -> -27
				-128, //102 -> -26
				-128, //103 -> -25
				-128, //104 -> -24
				-128, //105 -> -23
				-128, //106 -> -22
				-128, //107 -> -21
				-128, //108 -> -20
				-128, //109 -> -19
				-128, //110 -> -18
				-128, //111 -> -17
				-128, //112 -> -16
				-128, //113 -> -15
				-128, //114 -> -14
				-128, //115 -> -13
				-128, //116 -> -12
				-128, //117 -> -11
				-128, //118 -> -10
				-128, //119 -> -9
				-128, //120 -> -8
				-128, //121 -> -7
				-128, //122 -> -6
				-128, //123 -> -5
				-128, //124 -> -4
				-128, //125 -> -3
				-128, //126 -> -2
				-128, //127 -> -1
				-128, //128 -> 0 => NULL
				-128, //129 -> 1 => SOH
				-128, //130 -> 2 => STX
				-128, //131 -> 3 => ETX
				-128, //132 -> 4 => EOT
				-128, //133 -> 5 => ENQ
				-128, //134 -> 6 => ACK
				-128, //135 -> 7 => BEL
				-128, //136 -> 8 => BS
				-128, //137 -> 9 => TAB
				-10, //138 -> 10 => LF <=
				-128, //139 -> 11 => VT                    '
				-128, //140 -> 12 => NP
				-13, //141 -> 13 => CR <=
				-128, //142 -> 14 => SO
				-128, //143 -> 15 => SI
				-128, //144 -> 16 => DLE
				-128, //145 -> 17 => DC1
				-128, //146 -> 18 => DC2
				-128, //147 -> 19 => DC3
				-128, //148 -> 20 => DC4
				-128, //149 -> 21 => NAK
				-128, //150 -> 22 => SYN
				-128, //151 -> 23 => ETB
				-128, //152 -> 24 => CAN
				-128, //153 -> 25 => EM
				-128, //154 -> 26 => SUB
				-128, //155 -> 27 => ESC
				-128, //156 -> 28 => FS
				-128, //157 -> 29 => GS
				-128, //158 -> 30 => RS
				-128, //159 -> 31 => US
				-128, //160 -> 32 => Space
				-128, //161 -> 33 => '!'
				-128, //162 -> 34 => '"'
				-128, //163 -> 35 => '#'
				-128, //164 -> 36 => '$'
				-128, //165 -> 37 => '%'
				-128, //166 -> 38 => '&'
				-128, //167 -> 39 => '''
				-128, //168 -> 40 => '('
				-128, //169 -> 41 => ')'
				-128, //170 -> 42 => '*'
				-128, //171 -> 43 => '+'
				-128, //172 -> 44 => ','
				-128, //173 -> 45 => '-'
				-128, //174 -> 46 => '.'
				-128, //175 -> 47 => '/'
				-128, //176 -> 48 => '0'
				-128, //177 -> 49 => '1'
				-128, //178 -> 50 => '2'
				-128, //179 -> 51 => '3'
				-128, //180 -> 52 => '4'
				-128, //181 -> 53 => '5'
				-128, //182 -> 54 => '6'
				-128, //183 -> 55 => '7'
				-128, //184 -> 56 => '8'
				-128, //185 -> 57 => '9'
				-128, //186 -> 58 => ':'
				-128, //187 -> 59 => ';'
				-128, //188 -> 60 => '<'
				-128, //189 -> 61 => '='
				-128, //190 -> 62 => '>'
				-128, //191 -> 63 => '?'
				-128, //192 -> 64 => '@'
				A, //193 -> 65 => 'A'
				-1, //194 -> 66 => 'B'
				C, //195 -> 67 => 'C'
				D, //196 -> 68 => 'D'
				E, //197 -> 69 => 'E'
				F, //198 -> 70 => 'F'
				G, //199 -> 71 => 'G'
				H, //200 -> 72 => 'H'
				I, //201 -> 73 => 'I'
				-1, //202 -> 74 => 'J'
				K, //203 -> 75 => 'K'
				L, //204 -> 76 => 'L'
				M, //205 -> 77 => 'M'
				N, //206 -> 78 => 'N'
				-1, //207 -> 79 => 'O'
				P, //208 -> 80 => 'P'
				Q, //209 -> 81 => 'Q'
				R, //210 -> 82 => 'R'
				S, //211 -> 83 => 'S'
				T, //212 -> 84 => 'T'
			   -1, //213 -> 85 => 'U'
				V, //214 -> 86 => 'V'
				W, //215 -> 87 => 'W'
				X, //216 -> 88 => 'X'
				Y, //217 -> 89 => 'Y'
				-1, //218 -> 90 => 'Z'
				-128, //219 -> 91 => '['
				-128, //220 -> 92 => '\'
				-128, //221 -> 93 => ']'
				-128, //222 -> 94 => '^'
				-128, //223 -> 95 => '_'
				-128, //224 -> 96 => '`'
				A, //225 -> 97 => 'a'
				-1, //226 -> 98 => 'b'
				C, //227 -> 99 => 'c'
				D, //228 -> 100 => 'd'
				E, //229 -> 101 => 'e'
				F, //230 -> 102 => 'f'
				G, //231 -> 103 => 'g'
				H, //232 -> 104 => 'h'
				I, //233 -> 105 => 'i'
				-1, //234 -> 106 => 'j'
				K, //235 -> 107 => 'k'
				L, //236 -> 108 => 'l'
				M, //237 -> 109 => 'm'
				N, //238 -> 110 => 'n'
				-1, //239 -> 111 => 'o'
				P, //240 -> 112 => 'p'
				Q, //241 -> 113 => 'q'
				R, //242 -> 114 => 'r'
				S, //243 -> 115 => 's'
				T, //244 -> 116 => 't'
				-1, //245 -> 117 => 'u'
				V, //246 -> 118 => 'v'
				W, //247 -> 119 => 'w'
				X, //248 -> 120 => 'x'
				Y, //249 -> 121 => 'y'
				-1, //250 -> 122 => 'z'
				-1, //251 -> 123 => '{'
				-1, //252 -> 124 => '|'
				-1, //253 -> 125 => '}'
				-1, //254 -> 126 => '~'
				-128 //255 -> 127 => DEL
			};
		
		
		
		
        static final byte[][][] GENETIC_CODE=new byte[][][] {                
                {// [a]                    
                    {// [a][a]
                        LYS,  //[a][a][a]
                        ASN,  //[a][a][c]
                        LYS,  //[a][a][g]
                        ASN   //[a][a][t]
                    },
                    {// [a][c]
                        THR,  //[a][c][a]
                        THR,  //[a][c][c]
                        THR,  //[a][c][g]
                        THR   //[a][c][t]
                    },                    
                    {// [a][g]
                        ARG,  //[a][g][a]
                        SER,  //[a][g][c]
                        ARG,  //[a][g][g]
                        SER  //[a][g][t]
                    },                    
                    {// [a][g]
                        ILE,  //[a][t][a]
                        ILE,  //[a][t][c]
                        MET,  //[a][t][g]
                        ILE  //[a][t][t]
                    },
                },                
                {// [c]                    
                    {// [c][a]
                        GLN,  //[c][a][a]
                        HIS,  //[c][a][c]
                        GLN,  //[c][a][g]
                        HIS  //[c][a][t]
                    },                    
                    {// [c][c]
                        PRO,  //[c][c][a]
                        PRO,  //[c][c][c]
                        PRO,  //[c][c][g]
                        PRO  //[c][c][t]
                    },{// [c][g]
                        ARG,  //[c][g][a]
                        ARG,  //[c][g][c]
                        ARG,  //[c][g][g]
                        ARG  //[c][g][t]
                    },{// [c][t]
                        LEU,  //[c][t][a]
                        LEU,  //[c][t][c]
                        LEU,  //[c][t][g]
                        LEU  //[c][t][t]
                    },
                },                
                {// [g]                    
                    {// [g][a]
                        GLU,  //[g][a][a]
                        ASP,  //[g][a][c]
                        GLU,  //[g][a][g]
                        ASP  //[g][a][t]
                    },
                    {// [g][c]
                        ALA,  //[g][c][a]
                        ALA,  //[g][c][c]
                        ALA,  //[g][c][g]
                        ALA  //[g][c][t]
                    },                   
                    {// [g][g]
                        GLY,  //[g][g][a]
                        GLY,  //[g][g][c]
                        GLY,  //[g][g][g]
                        GLY  //[g][g][t]
                    },
                    {// [g][t]
                        VAL,  //[g][t][a]
                        VAL,  //[g][t][c]
                        VAL,  //[g][t][g]
                        VAL  //[g][t][t]
                    },
                },                
                {// [t]                    
                    {// [t][a]
                        X , // "STOP" [t][a][a]
                        TYR,  //[t][a][c]
                        X , // "STOP" [t][a][g]
                        TYR  //[t][a][t]
                    },                    
                    {// [t][c]
                        SER,  //[t][c][a]
                        SER,  //[t][c][c]
                        SER,  //[t][c][g]
                        SER   //[t][c][t]
                    },
                    {// [t][g]
                        X, // "STOP" [t][g][a]
                        CYS,  //[t][g][c]
                        TRP,  //[t][g][g]
                        CYS  //[t][g][t]
                    },
                    {// [t][t]
                        LEU,  //[t][t][a]
                        PHE,  //[t][t][c]
                        LEU,  //[t][t][g]
                        PHE  //[t][t][t]
                    }
                }
        };        
		
		
		static Protein INSTANCE = new Protein();
		/**
		 * Constructor for protein dna.
		 * @param chars
		 */
		private Protein() {
			super("PROTEIN", PROTEIN_ALPHABET);
		}
		/* (non-Javadoc)
		 * @see bio.seq.Alphabet#byte2byte(byte)
		 */
		@Override
		public byte byte2index(byte byteRead) {
			return BYTE_PROTEIN_MAP[byteRead + 128];
		}	
		
		public static byte translate(byte first, byte second, byte third){
			return GENETIC_CODE[first][second][third];
		}
		/* (non-Javadoc)
		 * @see bio.seq.Alphabet#match(byte, byte)
		 */
		@Override
		public boolean match(int a, int b){
			return a == b;
		}
	}
	
	
	public static class ProteinExtention extends Alphabet{
		
		//NB: Make sure the following constants agree
		public static final int A =  0, ALA = A;
		public static final int R =  1, ARG = R;
		public static final int N =  2, ASN = N;
		public static final int D =  3, ASP = D;
		public static final int C =  4, CYS = C;
		public static final int Q =  5, GLN = Q;
		public static final int E =  6, GLU = E;
		public static final int G =  7, GLY = G;
		public static final int H =  8, HIS = H;
		public static final int I =  9, ILE = I;
		public static final int L = 10, LEU = L;
		public static final int K = 11, LYS = K;
		public static final int M = 12, MET = M;
		public static final int F = 13, PHE = F;
		public static final int P = 14, PRO = P;
		public static final int S = 15, SER = S;
		public static final int T = 16, THR = T;
		public static final int W = 17, TRP = W;
		public static final int Y = 18, TYR = Y;
		public static final int V = 19, VAL = V;
		public static final int X = 20, UKN = X;
		public static final int U = 21;
		public static final int O = 22;
		public static final int B = 23;
		public static final int Z = 24;		
		public static final int STOP = 25;
		public static final int GAP = 26;
		
		//convert int -> char
		private static char [] PROTEIN_ALPHABET = {'A', 'R', 'N', 'D', 'C', 'Q', 'E', 'G', 'H', 'I', 'L', 'K', 'M', 'F', 'P', 'S', 'T', 'W', 'Y', 'V','X','U', 'O', 'B','Z','*','-'};
		
		//convert byte -> char ->int for fast IO
		private static byte[] BYTE_PROTEIN_MAP = {
			//value, newIndex, original
				-128, //0 -> -128
				-128, //1 -> -127
				-128, //2 -> -126
				-128, //3 -> -125
				-128, //4 -> -124
				-128, //5 -> -123
				-128, //6 -> -122
				-128, //7 -> -121
				-128, //8 -> -120
				-128, //9 -> -119
				-128, //10 -> -118
				-128, //11 -> -117
				-128, //12 -> -116
				-128, //13 -> -115
				-128, //14 -> -114
				-128, //15 -> -113
				-128, //16 -> -112
				-128, //17 -> -111
				-128, //18 -> -110
				-128, //19 -> -109
				-128, //20 -> -108
				-128, //21 -> -107
				-128, //22 -> -106
				-128, //23 -> -105
				-128, //24 -> -104
				-128, //25 -> -103
				-128, //26 -> -102
				-128, //27 -> -101
				-128, //28 -> -100
				-128, //29 -> -99
				-128, //30 -> -98
				-128, //31 -> -97
				-128, //32 -> -96
				-128, //33 -> -95
				-128, //34 -> -94
				-128, //35 -> -93
				-128, //36 -> -92
				-128, //37 -> -91
				-128, //38 -> -90
				-128, //39 -> -89
				-128, //40 -> -88
				-128, //41 -> -87
				-128, //42 -> -86
				-128, //43 -> -85
				-128, //44 -> -84
				-128, //45 -> -83
				-128, //46 -> -82
				-128, //47 -> -81
				-128, //48 -> -80
				-128, //49 -> -79
				-128, //50 -> -78
				-128, //51 -> -77
				-128, //52 -> -76
				-128, //53 -> -75
				-128, //54 -> -74
				-128, //55 -> -73
				-128, //56 -> -72
				-128, //57 -> -71
				-128, //58 -> -70
				-128, //59 -> -69
				-128, //60 -> -68
				-128, //61 -> -67
				-128, //62 -> -66
				-128, //63 -> -65
				-128, //64 -> -64
				-128, //65 -> -63
				-128, //66 -> -62
				-128, //67 -> -61
				-128, //68 -> -60
				-128, //69 -> -59
				-128, //70 -> -58
				-128, //71 -> -57
				-128, //72 -> -56
				-128, //73 -> -55
				-128, //74 -> -54
				-128, //75 -> -53
				-128, //76 -> -52
				-128, //77 -> -51
				-128, //78 -> -50
				-128, //79 -> -49
				-128, //80 -> -48
				-128, //81 -> -47
				-128, //82 -> -46
				-128, //83 -> -45
				-128, //84 -> -44
				-128, //85 -> -43
				-128, //86 -> -42
				-128, //87 -> -41
				-128, //88 -> -40
				-128, //89 -> -39
				-128, //90 -> -38
				-128, //91 -> -37
				-128, //92 -> -36
				-128, //93 -> -35
				-128, //94 -> -34
				-128, //95 -> -33
				-128, //96 -> -32
				-128, //97 -> -31
				-128, //98 -> -30
				-128, //99 -> -29
				-128, //100 -> -28
				-128, //101 -> -27
				-128, //102 -> -26
				-128, //103 -> -25
				-128, //104 -> -24
				-128, //105 -> -23
				-128, //106 -> -22
				-128, //107 -> -21
				-128, //108 -> -20
				-128, //109 -> -19
				-128, //110 -> -18
				-128, //111 -> -17
				-128, //112 -> -16
				-128, //113 -> -15
				-128, //114 -> -14
				-128, //115 -> -13
				-128, //116 -> -12
				-128, //117 -> -11
				-128, //118 -> -10
				-128, //119 -> -9
				-128, //120 -> -8
				-128, //121 -> -7
				-128, //122 -> -6
				-128, //123 -> -5
				-128, //124 -> -4
				-128, //125 -> -3
				-128, //126 -> -2
				-128, //127 -> -1
				-128, //128 -> 0 => NULL
				-128, //129 -> 1 => SOH
				-128, //130 -> 2 => STX
				-128, //131 -> 3 => ETX
				-128, //132 -> 4 => EOT
				-128, //133 -> 5 => ENQ
				-128, //134 -> 6 => ACK
				-128, //135 -> 7 => BEL
				-128, //136 -> 8 => BS
				-128, //137 -> 9 => TAB
				-10, //138 -> 10 => LF <=
				-128, //139 -> 11 => VT                    '
				-128, //140 -> 12 => NP
				-13, //141 -> 13 => CR <=
				-128, //142 -> 14 => SO
				-128, //143 -> 15 => SI
				-128, //144 -> 16 => DLE
				-128, //145 -> 17 => DC1
				-128, //146 -> 18 => DC2
				-128, //147 -> 19 => DC3
				-128, //148 -> 20 => DC4
				-128, //149 -> 21 => NAK
				-128, //150 -> 22 => SYN
				-128, //151 -> 23 => ETB
				-128, //152 -> 24 => CAN
				-128, //153 -> 25 => EM
				-128, //154 -> 26 => SUB
				-128, //155 -> 27 => ESC
				-128, //156 -> 28 => FS
				-128, //157 -> 29 => GS
				-128, //158 -> 30 => RS
				-128, //159 -> 31 => US
				-128, //160 -> 32 => Space
				-128, //161 -> 33 => '!'
				-128, //162 -> 34 => '"'
				-128, //163 -> 35 => '#'
				-128, //164 -> 36 => '$'
				-128, //165 -> 37 => '%'
				-128, //166 -> 38 => '&'
				-128, //167 -> 39 => '''
				-128, //168 -> 40 => '('
				-128, //169 -> 41 => ')'
				STOP, //170 -> 42 => '*'
				-128, //171 -> 43 => '+'
				-128, //172 -> 44 => ','
				GAP, //173 -> 45 => '-'
				-128, //174 -> 46 => '.'
				-128, //175 -> 47 => '/'
				-128, //176 -> 48 => '0'
				-128, //177 -> 49 => '1'
				-128, //178 -> 50 => '2'
				-128, //179 -> 51 => '3'
				-128, //180 -> 52 => '4'
				-128, //181 -> 53 => '5'
				-128, //182 -> 54 => '6'
				-128, //183 -> 55 => '7'
				-128, //184 -> 56 => '8'
				-128, //185 -> 57 => '9'
				-128, //186 -> 58 => ':'
				-128, //187 -> 59 => ';'
				-128, //188 -> 60 => '<'
				-128, //189 -> 61 => '='
				-128, //190 -> 62 => '>'
				-128, //191 -> 63 => '?'
				-128, //192 -> 64 => '@'
				A, //193 -> 65 => 'A'
				B, //194 -> 66 => 'B'
				C, //195 -> 67 => 'C'
				D, //196 -> 68 => 'D'
				E, //197 -> 69 => 'E'
				F, //198 -> 70 => 'F'
				G, //199 -> 71 => 'G'
				H, //200 -> 72 => 'H'
				I, //201 -> 73 => 'I'
				-1, //202 -> 74 => 'J'
				K, //203 -> 75 => 'K'
				L, //204 -> 76 => 'L'
				M, //205 -> 77 => 'M'
				N, //206 -> 78 => 'N'
				O, //207 -> 79 => 'O'
				P, //208 -> 80 => 'P'
				Q, //209 -> 81 => 'Q'
				R, //210 -> 82 => 'R'
				S, //211 -> 83 => 'S'
				T, //212 -> 84 => 'T'
			   U, //213 -> 85 => 'U'
				V, //214 -> 86 => 'V'
				W, //215 -> 87 => 'W'
				X, //216 -> 88 => 'X'
				Y, //217 -> 89 => 'Y'
				Z, //218 -> 90 => 'Z'
				-128, //219 -> 91 => '['
				-128, //220 -> 92 => '\'
				-128, //221 -> 93 => ']'
				-128, //222 -> 94 => '^'
				-128, //223 -> 95 => '_'
				-128, //224 -> 96 => '`'
				A, //225 -> 97 => 'a'
				B, //226 -> 98 => 'b'
				C, //227 -> 99 => 'c'
				D, //228 -> 100 => 'd'
				E, //229 -> 101 => 'e'
				F, //230 -> 102 => 'f'
				G, //231 -> 103 => 'g'
				H, //232 -> 104 => 'h'
				I, //233 -> 105 => 'i'
				-1, //234 -> 106 => 'j'
				K, //235 -> 107 => 'k'
				L, //236 -> 108 => 'l'
				M, //237 -> 109 => 'm'
				N, //238 -> 110 => 'n'
				O, //239 -> 111 => 'o'
				P, //240 -> 112 => 'p'
				Q, //241 -> 113 => 'q'
				R, //242 -> 114 => 'r'
				S, //243 -> 115 => 's'
				T, //244 -> 116 => 't'
				U, //245 -> 117 => 'u'
				V, //246 -> 118 => 'v'
				W, //247 -> 119 => 'w'
				X, //248 -> 120 => 'x'
				Y, //249 -> 121 => 'y'
				Z, //250 -> 122 => 'z'
				-1, //251 -> 123 => '{'
				-1, //252 -> 124 => '|'
				-1, //253 -> 125 => '}'
				-1, //254 -> 126 => '~'
				-128 //255 -> 127 => DEL
			};
		
		
		static ProteinExtention INSTANCE = new ProteinExtention();
		/**
		 * Constructor for protein dna.
		 * @param chars
		 */
		private ProteinExtention() {
			super("PROTEIN", PROTEIN_ALPHABET);
		}
		/* (non-Javadoc)
		 * @see bio.seq.Alphabet#byte2byte(byte)
		 */
		@Override
		public byte byte2index(byte byteRead) {
			return BYTE_PROTEIN_MAP[byteRead + 128];
		}	
				
		/* (non-Javadoc)
		 * @see bio.seq.Alphabet#match(byte, byte)
		 */
		@Override
		public boolean match(int a, int b){
			return a == b;
		}
	}
	/**
	 * A custom dna
	 * @author Minh Duc Cao (http://www.caominhduc.org/)
	 */
	public class CustomAlphabet extends Alphabet{		
		public CustomAlphabet (String name, char[] charList){
			super(name, charList);
		}

		/* (non-Javadoc)
		 * @see japsa.seq.Alphabet#match(byte, byte)
		 */
		@Override
		public boolean match(int a, int b) {			
			return a == b;
		}

		/* (non-Javadoc)
		 * @see japsa.seq.Alphabet#byte2index(byte)
		 */
		@Override
		public byte byte2index(byte byteRead) {			
			return (byte) (byteRead + 127);
		}
	}
	
	public static class AllByte extends Alphabet{
		
		
		private static char [] allChars = new char[256];
		static{
			for (int i =0; i < 256; i++)
				allChars[i] = (char)i;
		}
				
		public AllByte(){
			super("ALL", allChars);
		}

		/* (non-Javadoc)
		 * @see japsa.seq.Alphabet#match(byte, byte)
		 */
		@Override
		public boolean match(int a, int b) {
			return a == b;
		}

		/* (non-Javadoc)
		 * @see japsa.seq.Alphabet#byte2index(byte)
		 */
		@Override
		public byte byte2index(byte byteRead) {		
			return byteRead;
		}
		
	}
	
	
	
}
