# shell environment used for each job
# note, this is a naked shell, not aware of your bashrc!
shell.executable("/bin/bash")
# unofficial bash strict mode
shell.prefix("set -euo pipefail;")# don't forget trailing semicolon

done_list=[]
for sample in config['samples'].keys():
    gid=config['samples'][sample]['gid']
    done_list.append("log/capsim_reads/{}/{}.done".format(gid,sample))


def sim_done(wildcards):
    return expand("capsim_reads/{gid}/{sample}_{index}.fastq.gz", gid=config['samples'][wildcards.sample]['gid'], sample=wildcards.sample, index=range(1,3))


rule all:
    input:
        done_list,
        expand("merged/capsim_merged_{index}.fastq.gz", index=range(1, 3))

rule build_index:
    input:
        genome=lambda wildcards: config['genomes'][wildcards.gid],
    params:
        prefix="genome_index/{gid}"
    output:
        expand("genome_index/{{gid}}.{index}.bt2",  index=range(1,5)),
        expand("genome_index/{{gid}}.rev.{index}.bt2", index=range(1,3)),
    log:
        "log/build_index.log"
    shell:
        '''
        bowtie2-build {input.genome} {params.prefix}
        '''


rule align_probe:
    input:
        rules.build_index.output,
        probe = config['probe']
    output:
        bam="mapping/{gid}.sorted.bam",
        bai="mapping/{gid}.sorted.bam.bai",
    params:
        rprefix="genome_index/{gid}",
        bprefix="mapping/{gid}.sorted",
    log:
        "log/align_probe.log"
    shell:
        '''
        bowtie2 --local --very-sensitive-local -p 8 --mp 8 --rdg 10,8 --rfg 10,8 -k 10000 -f -x {params.rprefix} -U {input.probe} | samtools view -bSu - | samtools sort - {params.bprefix}
        samtools index {output.bam}
        '''


rule run_capsim:
    input:
        genome=lambda wildcards: config['genomes'][wildcards.gid],
        bam="mapping/{gid}.sorted.bam",
        bai="mapping/{gid}.sorted.bam.bai",
    params:
        readnum=lambda wildcards: config['samples'][wildcards.sample]['readnum'],
        sprefix="capsim_reads/{gid}/{sample}",
    output:
        expand("capsim_reads/{{gid}}/{{sample}}_{index}.fastq.gz", index=range(1,3))
    log:
        "log/run_capsim.log"
    shell:
        '''
        jsa.sim.capsim --reference {input.genome} --probe {input.bam} --ID {wildcards.sample} --miseq {params.sprefix} --fmedian {config[fmedian]} --illen {config[rlen]} --num {params.readnum}
        '''


rule mark_done:
    input:
        sim_done
    output:
        touch("log/capsim_reads/{gid}/{sample}.done")


rule merge_reads1:
    input:
        done_list
    output:
        o1 = "merged/capsim_merged_1.fastq.gz",
    log:
        "log/merge_reads1.log"
    shell:
        '''
        find capsim_reads/ -type f -name '*_1.fastq.gz' | sort | xargs cat > {output.o1}
        '''


rule merge_reads2:
    input:
        done_list
    output:
        o2 = "merged/capsim_merged_2.fastq.gz",
    log:
        "log/merge_reads2.log"
    shell:
        '''
        find capsim_reads/ -type f -name '*_1.fastq.gz' | sort | sed 's/_1.fastq.gz/_2.fastq.gz/g' | xargs cat > {output.o2}
        '''
